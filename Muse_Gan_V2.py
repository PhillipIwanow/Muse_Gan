import sys
import matplotlib.pyplot as plt
import numpy as np
import pickle
import glob
from music21 import converter, instrument, note, chord, stream
from keras.models import load_model
from keras.layers import Input, Dense, Flatten,  Reshape, Dropout,LSTM, Bidirectional, Embedding
from keras.layers import BatchNormalization, Activation, ZeroPadding2D
from keras.layers.advanced_activations import LeakyReLU
from keras.models import Sequential, Model
from keras.optimizers import Adam
from keras.utils import np_utils
import matplotlib.pyplot as plt

def get_notes():
    """ Get all the notes and chords from the midi files """
    notes = []

    for file in glob.glob("test/*.mid"):
        midi = converter.parse(file)

        print("Parsing %s" % file)

        notes_to_parse = None

        try: # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse()
        except: # file has notes in a flat structure
            notes_to_parse = midi.flat.notes

        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    return notes

def prepare_sequences(notes, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    sequence_length = 100

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))

    # Create a dictionary to map pitches to integers
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    network_input = []
    network_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        network_output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # Reshape the input into a format compatible with LSTM layers
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    xmin = np.min(network_input)
    xmax = np.max(network_input)
    # Normalize input between -1 and 1
    network_input = (network_input - xmin) / (xmax-xmin)
    network_output = np_utils.to_categorical(network_output)
    print(network_input.shape)
    return (network_input, network_output, xmax, xmin)

def generate_notes(model, network_input, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input)-1)

    # Get pitch names and store in a dictionary
    pitchnames = sorted(set(item for item in notes))
    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(500):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern = numpy.append(pattern,index)
        #pattern.append(index)
        pattern = pattern[1:len(pattern)]
        print('pred_out')
        print(prediction_output)
    return prediction_output

def create_midi(prediction_output, filename):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for item in prediction_output:
        pattern = item[0]
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='{}.mid'.format(filename))

plt_gloss = []
plt_dloss = []
plt_epoch = []
plt_acc = []

class GanV2():
    def __init__(self, rows, batch_size):
        self.rows = 100
        self.batch_size = batch_size
        self.seq_length = rows
        self.seq_shape = (self.seq_length, 1)
        self.latent = 1000
        self.disc_loss = []
        self.gen_loss = []


        optimizer = Adam(0.0002, 0.5)


        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        #building and training
        z = Input(shape=(self.batch_size, self.latent, ))
        self.generator = self.Build_Generator()
        generated_seqs = self.generator(z)

        self.discriminator.trainable = False

        validity = self.discriminator(generated_seqs)

        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def Build_Generator(self):
        model = Sequential()
        model.add(LSTM(512, input_shape=(self.batch_size, self.latent), return_sequences=True))
        model.add(Dropout(0.6))
        model.add(Flatten())
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(1024))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.seq_shape), activation='tanh'))
        model.add(Reshape(self.seq_shape))
        model.summary()

        noise = Input(shape=(self.batch_size, self.latent, ))
        seq = model(noise)
        return Model(noise, seq)

    def build_discriminator(self):
        model = Sequential()
        model.add(LSTM(512, input_shape=self.seq_shape, return_sequences=True))
        model.add(Bidirectional(LSTM(512)))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(256))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()

        seq = Input(shape=self.seq_shape)
        validity = model(seq)

        return Model(seq, validity)

    def train(self, epochs,  sample_interval=50, use_model=False):
        notes = get_notes()
        print(np.shape(notes))
        n_vocab = len(set(notes))
        X_train, y_train, xmax, xmin = prepare_sequences(notes, n_vocab)

        # Adversarial ground truths
        real = np.ones((self.batch_size, 1))
        fake = np.zeros((self.batch_size, 1))

        if use_model:
            self.generator = load_model('generatorV2.h5')

        for epoch in range(epochs):

            idx = np.random.randint(0, X_train.shape[0], self.batch_size)
            real_seqs = X_train[idx]

            noise = np.random.normal(0, 1, (self.batch_size,  self.latent))
            print('beforer reshape')
            print(noise.shape)
            print('after reshape')
            input_noise = np.reshape(noise, (1, noise.shape[0],  noise.shape[1]))
            print(input_noise.shape)
            gen_seqs = self.generator.predict(input_noise)
            print(gen_seqs.shape)

            d_loss_real = self.discriminator.train_on_batch(real_seqs, real)
            d_loss_fake = self.discriminator.train_on_batch(gen_seqs, fake)
            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)


            #  Training the Generator
            noise = np.random.normal(0, 1, (self.batch_size, self.latent, ))
            input_noise = np.reshape(noise, (1, noise.shape[0],  noise.shape[1]))
            # Train the generator (to have the discriminator label samples as real)
            g_loss = self.combined.train_on_batch(input_noise, real)
            plt_dloss.append(d_loss[0])
            plt_gloss.append(g_loss)
            plt_epoch.append(epoch)
            plt_acc.append(d_loss[1])
            if epoch % 10 == 0:
                self.generate(notes, xmax, xmin, name='Gan_epcochV2{}'.format(epoch))
                self.generator.save('generatorV2.h5')

            # Print the progress and save into loss lists
            if epoch % sample_interval == 0:
              print ("%d [D loss: %f, acc.: %.2f%%] [G loss: %f]" % (epoch, d_loss[0], d_loss[1], g_loss))
              self.disc_loss.append(d_loss[0])
              self.gen_loss.append(g_loss)


        self.generate(notes, xmax, xmin)


    def generate(self, input_notes, xmax, xmin, name='Gan_FinalV2'):
        # Get pitch names and store in a dictionary
        notes = input_notes
        pitchnames = sorted(set(item for item in notes))
        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

        # Use random noise to generate sequences
        noise = np.random.normal(0, 1, (self.batch_size, self.latent, ))
        input_noise = np.reshape(noise, (1, noise.shape[0],  noise.shape[1]))
        predictions = self.generator.predict(input_noise)

        pred_notes = [np.abs((x*(xmax-xmin) + xmin)) for x in predictions[0]]

        pred_notes = [int_to_note[int(x)] for x in pred_notes]
        create_midi(pred_notes, name)


if __name__ == '__main__':
  gan = GanV2(rows=100, batch_size=1)
  gan.train(epochs=100, sample_interval=1, use_model=True)

  plt.plot(plt_dloss,  c='r', label='D Loss')
  plt.plot(plt_gloss,  c='g', label='G Loss')
  plt.plot(plt_acc,  c='b', label='D acc')
  plt.title('GAN V2')
  plt.ylabel('Loss')
  plt.xlabel('Epoch')
  plt.legend(loc='upper right')
  plt.show()
